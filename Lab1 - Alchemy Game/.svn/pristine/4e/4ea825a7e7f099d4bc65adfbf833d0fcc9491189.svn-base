#include "AlchemyGame.h"
#include <iostream>
using std::cout;
using std::endl;
using std::cin;
#include <Windows.h>
#include "RandomNumberGenerator.h"

const int AlchemyGame::AVAILABLE_SYMBOL_COLORS[] = {0,1,2,3,4,5,6,7,9,10,12,13,15};
const char AlchemyGame::AVAILABLE_SYMBOL_CHARS[] = {14 /*music sign*/, 11 /*male*/, 12 /*female*/, 127 /*del*/, 224 /*alpha*/, 232 /*phi*/, 228 /*sigma*/, 227 /*pi*/, 231 /*gamma*/, 230 /*mu*/, 229 /*lower case sigma*/, 236 /*infinity*/, 234 /*omega*/};
const Symbol AlchemyGame::SYMBOL_BOMB = Symbol('X', 4 /*red*/);
const Symbol AlchemyGame::SYMBOL_WILDCARD = Symbol(219 /*ANSI block character*/, 8 /*gray*/);
const Symbol AlchemyGame::SYMBOL_BLANK = Symbol('_', 4);
const COORD AlchemyGame::INITIAL_WILDCARD_COORD = {4,5};

AlchemyGame::AlchemyGame() : m_num_discards(0), m_score(0), m_num_symbols(0), m_num_colors(0){}

AlchemyGame::AlchemyGame(AlchemyGame const& copy) : m_board(copy.m_board), m_num_discards(copy.m_num_discards), m_score(copy.m_score), m_num_symbols(copy.m_num_symbols), m_num_colors(copy.m_num_colors){}

AlchemyGame::~AlchemyGame(){}

AlchemyGame& AlchemyGame::operator=(AlchemyGame const& rhs){
	m_board = rhs.m_board;
	m_num_discards = rhs.m_num_discards;
	m_score = rhs.m_score;

	return *this;
}

void AlchemyGame::Start(){
	SetUpConsoleWindow();

	bool error = true;
	int menu_choice = 0;
	
	while(error){
		try{
			menu_choice = MainMenu();
			ProcessMenuChoice(menu_choice);
			error = false;
		}catch(Exception e){
			cout << e << endl;
			system("pause");
		}
	}
}

int AlchemyGame::MainMenu(){
	int choice = -1;

	system("cls");
	cout << "Welcome to Alchemy!" << endl;
	cout << endl;
	cout << "1) New Game" << endl;
	cout << "2) Level Select" << endl;
	cout << "0) Exit" << endl;
	cout << endl;
	cout << "Enter Menu Choice: ";
	cin >> choice;

	bool cinIsGood = cin.good();
	cin.clear();
	cin.ignore(INT_MAX,'\n');

	if (!cinIsGood || choice < 0 || choice > 2) {
		throw Exception("Invalid menu choice.");
	}
	return choice;
}

int AlchemyGame::LevelSelectMenu(){
	int choice = -1;

	system("cls");
	cout << "Level Select:" << endl;
	cout << endl;
	cout << "Simply enter a level number below (1-" << AlchemyGame::MAX_LEVEL << ")" << endl;
	cout << endl;
	cout << "Level: ";
	cin >> choice;

	bool cinIsGood = cin.good();
	cin.clear();
	cin.ignore(INT_MAX,'\n');

	if (!cinIsGood || choice < 1 || choice > AlchemyGame::MAX_LEVEL) {
		throw Exception("Invalid menu choice.");
	}
	return choice;
}

void AlchemyGame::ProcessMenuChoice(int choice){
	int level = 1; // the game level to start on
	switch(static_cast<AlchemyGame::MENU_CHOICES>(choice)){
		case LEVEL_SELECT:
			level = LevelSelectMenu();
		case NEW_GAME:
			// set up game, with level setting up proper # of colors/symbols
			m_num_symbols = 4+level;
			m_num_colors = 4+level;

			MainGameLoop();
			break;
		case EXIT:
			break;
		default:
			throw Exception("Invalid menu choice. Expecting 0, 1 or 2.");
	}
}

void AlchemyGame::MainGameLoop(){
	while(!LevelComplete()){
		m_current_symbol = getRandomSymbol();
		DisplayBoard();
		try{
			m_current_move = getMove();
			//HandleMove(current_symbol);
		}catch(Exception e){
			cout << e << endl;
		}
		break; // remove me
	}
	
	// Show menu: next level, main menu, exit
	// if next level:
		// update number of symbols/colors for next level if <=last level
		// reset board (no golden spaces)
		// add wildcard symbol to middle
		// reset discard count
		// restart maingameloop()
	// if main menu
		// MainMenu()
	// if exit
		// do nothing and let maingameloop() end
	cout << "You win!" << endl;
}

void AlchemyGame::DisplayBoard(){
	system("cls");

	HANDLE wHnd = GetStdHandle(STD_OUTPUT_HANDLE);

	// the offset below horizontally centers the board
	COORD offset = {(AlchemyGame::GAME_WIDTH-2-AlchemyGame::BOARD_WIDTH)/2, 3};

	// make a 1d array representing the console buffer (to avoid updating each character and getting the screen flicker)
	CHAR_INFO consoleBuffer[AlchemyGame::GAME_WIDTH * AlchemyGame::GAME_HEIGHT];

	// first, filling the whole screen with blank as default
	for(int y = 0; y < GAME_WIDTH; ++y){
		for(int x = 0; x < GAME_HEIGHT; ++x){
			consoleBuffer[x + y*GAME_HEIGHT].Char.AsciiChar = ' ';
			consoleBuffer[x + y*GAME_HEIGHT].Attributes = 0;
		}
	}

	CHAR_INFO symbol; // temp symbol struct to make code more readable below
	for(int r = 0; r <= AlchemyGame::BOARD_HEIGHT + 1; ++r){
		for(int c = 0; c <= AlchemyGame::BOARD_WIDTH + 1; ++c){
			if(r>0 && r<AlchemyGame::BOARD_HEIGHT+1 && c>0 && c<AlchemyGame::BOARD_WIDTH+1){
				// set the actual character representation of the symbol
				symbol.Char.AsciiChar = m_board.getSymbol(r-1,c-1).getCharacter();
			
				// set the color of the symbol
				symbol.Attributes = m_board.getSymbol(r-1,c-1).getColor();
			
				// if the piece needs to be golden background, or the value of the golden bg in, else default background color
				if(m_board.getGolden(r-1,c-1)){
					symbol.Attributes |= AlchemyGame::GOLDEN_BACKGROUND_COLOR << 4;
				}else{
					symbol.Attributes |= AlchemyGame::BOARD_BACKGROUND_COLOR << 4;
				}

				consoleBuffer[offset.X + c + (r + offset.Y)*AlchemyGame::GAME_WIDTH] = symbol;
			}else{
				// output a border showing the row/col
				consoleBuffer[offset.X + c + (r + offset.Y)*AlchemyGame::GAME_WIDTH].Attributes = FOREGROUND_BLUE;
				if(r==0 && c==0){
					// top left corner
				}else if(r==0 && c==AlchemyGame::BOARD_WIDTH+1){
					// top right corner
				}else if(r==AlchemyGame::BOARD_HEIGHT+1 && c==0){
					// bottom left corner
				}else if(r==AlchemyGame::BOARD_HEIGHT+1 && c==AlchemyGame::BOARD_WIDTH+1){
					// bottom right corner
				}else if(r==0 || r==AlchemyGame::BOARD_HEIGHT+1){
					// top and bottom of board, output the current col
					consoleBuffer[offset.X + c + (r + offset.Y)*GAME_WIDTH].Char.AsciiChar = c+'0';
				}else if(c==0 || c==AlchemyGame::BOARD_WIDTH+1){
					// left and right of the board, output current row
					consoleBuffer[offset.X + c + (r + offset.Y)*GAME_WIDTH].Char.AsciiChar = r+'0';
				}
				
			}
		}
	}
	
	// setting up parameters to pass along to console functions
	COORD charBuffSize = {AlchemyGame::GAME_WIDTH, AlchemyGame::GAME_HEIGHT};
	COORD characterPosition = {0, 0};
	SMALL_RECT writeArea = {0, 0, AlchemyGame::GAME_WIDTH-1, AlchemyGame::GAME_HEIGHT-1};

	// output the console buffer to the screen
	WriteConsoleOutputA(wHnd, consoleBuffer, charBuffSize, characterPosition, &writeArea);
}

COORD AlchemyGame::getMove(){
	
	bool cinIsGood; // flag used to determine if invalid input was thrown to cin

	HANDLE wHnd = GetStdHandle(STD_OUTPUT_HANDLE);

	COORD move = {0,0}; // the coordinates of the player's move
	COORD cursorPos; // the cursor position, used to place the row/col prompts in the correct place
	int input; // temp variable used to hold value of player's inputted row/col

	// set the cursor below the game board
	cursorPos.X = (AlchemyGame::GAME_WIDTH-10)/2;
	cursorPos.Y = AlchemyGame::BOARD_HEIGHT+6;
	SetConsoleCursorPosition(wHnd, cursorPos);
	cout << "Row: ";
	cin >> input;

	cinIsGood = cin.good();
	cin.clear();
	cin.ignore(INT_MAX,'\n');

	if (!cinIsGood || input < 0 || input > AlchemyGame::BOARD_HEIGHT) {
		throw Exception("Invalid row choice.");
	}else{
		move.Y = input;
	}

	// set the cursor below the game board, and below the row prompt
	cursorPos.X = (AlchemyGame::GAME_WIDTH-10)/2;
	cursorPos.Y = AlchemyGame::BOARD_HEIGHT+7;
	SetConsoleCursorPosition(wHnd, cursorPos);
	cout << "Col: ";
	cin >> input;

	cinIsGood = cin.good();
	cin.clear();
	cin.ignore(INT_MAX,'\n');

	if (!cinIsGood || input < 0 || input > AlchemyGame::BOARD_WIDTH) {
		throw Exception("Invalid col choice.");
	}else{
		move.X = input;
	}

	return move;
}
void AlchemyGame::HandleMove(Symbol symbol){
	// accept user input via mouse/keyboard
	
	// OMITTING ESCAPE EXIT HANDLING
	/*HANDLE rHnd = GetStdHandle(STD_INPUT_HANDLE);
	DWORD numEvents = 0;
	DWORD numEventsRead = 0;

	bool foundEvent = false;
	while(!foundEvent){
		GetNumberOfConsoleInputEvents(rHnd, &numEvents);
		if(numEvents != 0){
			INPUT_RECORD *eventBuffer = new INPUT_RECORD[numEvents];

			ReadConsoleInput(rHnd, eventBuffer, numEvents, &numEventsRead);

			for(DWORD i=0; i < numEventsRead && !foundEvent; ++i){
				// looping through all events that happened
				//cout << eventBuffer[i].EventType << endl;
				if (eventBuffer[i].EventType == KEY_EVENT) {
					cout << "Mouse!" << endl;
					if(eventBuffer[i].Event.KeyEvent.wVirtualKeyCode==VK_ESCAPE){
						// user hit escape, break to menu
						foundEvent = true;
					}else{
						// user hit a button, but it is not bound to any action ingame, ignore it
					}
				}
			}
			delete [] eventBuffer;
		}
	}*/

	

	// resume coding here

	// if user inputs a square coord via text/mouseclick
		// validate coords
		// if symbol is normal symbol:
			//PlaceSymbol(symbol, row, col);
		// else if symbol is a bomb:
			// ExplodeSymbolAt(row, col);
		//else wtf
	// if user inputs discard
		//DiscardSymbol(symbol);
}

void AlchemyGame::PlaceSymbol(Symbol symbol){
	// verify valid move isValidMove(symbol, row, col)
	// if valid
		//m_num_discards = 0;
		// m_board[row][col].setSymbol(symbol);
		// m_board[row][col].setGolden(true);
		// add score to current score
		
		// place the symbol on the game board
	// if not valid
		// display invalid move message/sound/etc
	
	

}

bool AlchemyGame::isValidMove(Symbol symbol, int row, int col){return false;}

bool AlchemyGame::LevelComplete(){
	bool level_completed = true;
	for(int r=0; r<AlchemyGame::BOARD_HEIGHT; ++r){
		for(int c=0; c<AlchemyGame::BOARD_WIDTH; ++c){
			if(!m_board.getGolden(r,c)){
				level_completed = false;
				break;
			}
		}
		if(!level_completed){
			break;
		}
	}
	return level_completed;
}

void AlchemyGame::SetUpConsoleWindow(){
	HANDLE wHnd = GetStdHandle(STD_OUTPUT_HANDLE);
	HANDLE rHnd = GetStdHandle(STD_INPUT_HANDLE);

	SetConsoleTitle(TEXT("Lab 1 - Alchemy by Andrew Sparkes"));

	// set up the window size and buffer size (for no scrollbars)
	SMALL_RECT windowSize = {0, 0, AlchemyGame::GAME_WIDTH-1, AlchemyGame::GAME_HEIGHT-1};
	COORD bufferSize = {AlchemyGame::GAME_WIDTH, AlchemyGame::GAME_HEIGHT};

	SetConsoleWindowInfo(wHnd, TRUE, &windowSize);
	SetConsoleScreenBufferSize(wHnd, bufferSize);

	// now, set the font size bigger so you don't need a microscope to play the game
	CONSOLE_FONT_INFOEX CurrentFontInfoEx;
	CurrentFontInfoEx.cbSize = sizeof(CONSOLE_FONT_INFOEX); // required so GetCurrentConsoleFontEx doesn't choke
	GetCurrentConsoleFontEx(wHnd, false, &CurrentFontInfoEx);
	CurrentFontInfoEx.dwFontSize.X = 12;
	CurrentFontInfoEx.dwFontSize.Y = 16;
	SetCurrentConsoleFontEx(wHnd, false, &CurrentFontInfoEx);
}

Symbol AlchemyGame::getRandomSymbol(){
	Symbol randomSymbol;

	// chance out of 10000, 1% would be 100, allows tuning down to nearest hundredth of a percent
	int chance_of_special = 100;

	// if the user rolls a special, the below determines which special. 
	// If both weights are the same, both have a 50/50. 
	// i.e. if bomb_weight = 3 and wildcard_weight = 1, the player will roll a bomb 3x more often than a wildcard
	int bomb_weight = 5;
	int wildcard_weight = 5;


	int first_rng_roll = RandomNumberGenerator::generate(1,10000);
	if(first_rng_roll <= chance_of_special){
		// user rolled a special, determine which
		int second_rng_roll = RandomNumberGenerator::generate(1,bomb_weight+wildcard_weight);
		if(second_rng_roll <= bomb_weight){
			// user rolled a bomb
			randomSymbol = AlchemyGame::SYMBOL_BOMB;
		}else{
			// user rolled a wildcard
			randomSymbol = AlchemyGame::SYMBOL_WILDCARD;
		}
	}else{
		// user rolled a normal symbol
		int color = AlchemyGame::AVAILABLE_SYMBOL_COLORS[RandomNumberGenerator::generate(0,m_num_colors-1)];
		char character = AlchemyGame::AVAILABLE_SYMBOL_CHARS[RandomNumberGenerator::generate(0,m_num_symbols-1)];
		randomSymbol = Symbol(character, color);
	}
	return randomSymbol;
}