#include "FreeCellGame.h"


FreeCellGame::FreeCellGame(void)
{
}


FreeCellGame::~FreeCellGame(void)
{
}


void FreeCellGame::Start(void)
{
	SetUpConsoleWindow();

	// display menu
	bool error = false;
	int menu_choice = -1;
	
	while(error || menu_choice != 0){
		try{
			menu_choice = MainMenu();
			ProcessMainMenuChoice(menu_choice);
			error = false;
		}catch(Exception e){
			cout << e << endl;
			error = true;
			system("pause");
		}
	}
}

void FreeCellGame::ProcessMainMenuChoice(int menu_choice)
{
	bool exit = false;

	ResetGame(); // resetting the game to defaults

	switch(static_cast<FreeCellGame::MENU_CHOICES>(menu_choice)){
		case CUSTOM_SEED:
			CustomSeed();
			break;
		case NEW_GAME:
			RandomSeed();
			break;
		case EXIT:
			exit = true;
			break;
		default:
			throw Exception("Invalid menu choice. Expecting 0, 1 or 2.");
	}

	if(!exit){
		DealDeckToPlayArea();
		MainGameLoop();
	}
}

int FreeCellGame::MainMenu()
{
	int choice = -1;

	system("cls");
	cout << "Welcome to FreeCell!" << endl;
	cout << endl;
	cout << "1) New Game" << endl;
	cout << "2) Custom Seed Game" << endl;
	cout << "0) Exit" << endl;
	cout << endl;
	cout << "Enter Menu Choice: ";
	cin >> choice;

	bool cinIsGood = cin.good();
	cin.clear();
	cin.ignore(INT_MAX,'\n');

	if (!cinIsGood || choice < 0 || choice > 2) {
		throw Exception("Invalid menu choice.");
	}
	return choice;
}

void FreeCellGame::CustomSeed(void)
{
	string seed;
	system("cls");
	cout << "Please input the seed below (1 for debug config): " << endl;
	cin >> seed;

	if(atoi(seed.c_str()) == 1){
		cout << "Debug config detected..." << endl;
		seed = "001020300111213102122232031323330414243405152535061626360717273708182838091929390a1a2a3a0b1b2b3b0c1c2c3c";
	}

	// check length of seed
	if(seed.length() != 52*2)
	{
		throw Exception("Invalid seed");
	}

	// check if length is even
	if(seed.length() % 2 == 1)
	{
		throw Exception("Invalid seed");
	}
		
	// now, iterate over the seed
	Card::RANK rank;
	Card::SUIT suit;
	string temp = "";
	Card newCard;

	// remove all current cards from all areas
	m_deck.Purge();
	string::const_iterator it = seed.begin();
	while(it != seed.end()){
		temp = *it;
		suit = static_cast<Card::SUIT>(strtol(temp.c_str(), nullptr, 16));
		if(suit < 0 || suit > Card::SUIT_COUNT){
			throw Exception("Invalid seed: Invalid suit code");
		}
		it++;

		temp = *it;
		rank = static_cast<Card::RANK>(strtol(temp.c_str(), nullptr, 16));
		if(rank < 0 || rank > Card::RANK_COUNT){
			throw Exception("Invalid seed: Invalid rank code");
		}
		it++;

		newCard = Card(suit, rank);
		cout << "Pushing " << newCard << " onto deck..." << endl;
		m_deck.Add(newCard);
	}

	// now, make sure that the cards passed in equate to a valid deck, i.e. not 52 ace of spades, etc
	bool validDeck = true;
	for(int rank = 0; rank < Card::RANK_COUNT && validDeck; ++rank)
	{
		for(int suit = 0; suit < Card::SUIT_COUNT && validDeck; ++suit)
		{
			if(m_deck.Count(Card(static_cast<Card::SUIT>(suit), static_cast<Card::RANK>(rank))) != 1)
			{
				validDeck = false;
			}
		}
	}
	if(!validDeck)
	{
		throw Exception("Invalid seed: Seed is not a standard 52 card deck permutation.");
	}

	system("pause");
}

void FreeCellGame::RandomSeed(void)
{
	m_deck.Purge();
	m_deck.SingleDeck();
	m_deck.Shuffle();
}


void FreeCellGame::MainGameLoop(void)
{
	cout << "In the main game loop Bitch." << endl;

	bool exit = false;
	while(!GameWon() && !exit)
	{
		DisplayTable();
		string move = GetInput();
		if(move == "exit")
		{
			exit = true;
		}
		else
		{
			try
			{
				ResolveMove(move);
			}
			catch(Exception e)
			{
				cout << e << endl;
			}
		}
	}
}

void FreeCellGame::DealDeckToPlayArea(void)
{
	Card drawnCard;

	unsigned stack_index = 0;
	while(m_deck.Length())
	{
		drawnCard = m_deck.Draw();
		m_table.m_playArea.AddCard(drawnCard, (stack_index++)%8 );
	}
}


void FreeCellGame::ResetGame(void)
{
	// resets the game to default (in the case of starting a new game, etc)
	GameTable new_table;
	m_table = new_table;

	
	m_deck.Purge();
}

void FreeCellGame::SetUpConsoleWindow(void)
{
	HANDLE wHnd = GetStdHandle(STD_OUTPUT_HANDLE);
	HANDLE rHnd = GetStdHandle(STD_INPUT_HANDLE);

	SetConsoleTitle(TEXT("Lab 3 - Freecell by Andrew Sparkes"));

	// set up the window size and buffer size (for no scrollbars)
	COORD bufferSize = {FreeCellGame::CONSOLE_WIDTH, FreeCellGame::CONSOLE_HEIGHT};
	SMALL_RECT windowSize = {0, 0, bufferSize.X-1, bufferSize.Y-1};

	SetConsoleWindowInfo(wHnd, TRUE, &windowSize);
	SetConsoleScreenBufferSize(wHnd, bufferSize);

	// now, set the font size bigger so you don't need a microscope to play the game
	CONSOLE_FONT_INFOEX CurrentFontInfoEx;
	CurrentFontInfoEx.cbSize = sizeof(CONSOLE_FONT_INFOEX); // required so GetCurrentConsoleFontEx doesn't choke
	GetCurrentConsoleFontEx(wHnd, false, &CurrentFontInfoEx);
	CurrentFontInfoEx.dwFontSize.X = 12;
	CurrentFontInfoEx.dwFontSize.Y = 16;
	SetCurrentConsoleFontEx(wHnd, false, &CurrentFontInfoEx);
}

bool FreeCellGame::GameWon(void)
{
	bool gameWon = true;
	
	for(int i = 0; i < 4 && gameWon; ++i)
	{
		if(m_table.m_homeCellArea.TopCard(i) != Card(static_cast<Card::SUIT>(i), Card::RANK_KING))
		{
			gameWon = false;
		}
	}

	return gameWon;
}

void FreeCellGame::DisplayTable()
{
	COORD freeCellOffset = {1,1};
	COORD homeCellOffset = {20,1};
	COORD playAreaOffset = {2,5};
	COORD commandOffset = {5,28};

	COORD cursorPos = {0,0};

	system("cls");
	HANDLE wHnd = GetStdHandle(STD_OUTPUT_HANDLE);

	// first output the free cell area
	cursorPos = freeCellOffset;
	SetConsoleCursorPosition(wHnd, cursorPos);
	cout << "Free Cells";
	for(int i = 0; i < 4; ++i)
	{
		cursorPos.Y = freeCellOffset.Y + 1;
		SetConsoleCursorPosition(wHnd, cursorPos);
		cout << m_table.m_freeCellArea.m_cards[i];

		cursorPos.Y += 1;
		SetConsoleCursorPosition(wHnd, cursorPos);
		cout << "FR" << i+1;

		cursorPos.X += 4; // knock it over for the next free cell
	}

	// now output the home cell area
	cursorPos = homeCellOffset;
	SetConsoleCursorPosition(wHnd, cursorPos);
	cout << "Home Cells";
	for(int i = 0; i < 4; ++i)
	{
		cursorPos.Y = homeCellOffset.Y + 1;
		SetConsoleCursorPosition(wHnd, cursorPos);
		cout << m_table.m_homeCellArea.TopCard(i);
		cursorPos.Y += 1;
		SetConsoleCursorPosition(wHnd, cursorPos);
		cout << "HO" << i+1;
		cursorPos.X += 4; // knock it over for the next free cell
	}

	// now output the play area
	// first, the border with row/col labels
	cursorPos = playAreaOffset;
	cursorPos.X +=3;
	for(char c = 'A'; c < 'I'; ++c){
		SetConsoleCursorPosition(wHnd, cursorPos);
		cout << c;
		cursorPos.X += 4;
	}
	cursorPos = playAreaOffset;
	cursorPos.Y += 1;
	for(int i = 1; i < 21; ++i){
		SetConsoleCursorPosition(wHnd, cursorPos);
		cout << i;
		cursorPos.Y += 1;
		if(i==9)
		{
			cursorPos.X -= 1;
		}
	}

	// now output the stacks of cards that comprise the play area
	cursorPos = playAreaOffset;
	cursorPos.X += 2;
	cursorPos.Y += 1;
	for(int i = 0; i < 8; ++i)
	{
		// iterate over each element in the stack and output it
		// an iterator doesn't make sense for a stack, so we duplicate the stack temporarily,
		// and pop all the elements into a STL vector, then output them in reverse to preserve the order
		vector<Card> currentStack;
		currentStack.reserve(m_table.m_playArea.m_cards.getLength());

		ListBasedStack<Card> copy(m_table.m_playArea.m_cards[i]);
		while(!copy.isEmpty())
		{
			currentStack.push_back(copy.Pop());
		}
		
		for(vector<Card>::reverse_iterator it = currentStack.rbegin(); it != currentStack.rend(); ++it)
		{
			SetConsoleCursorPosition(wHnd, cursorPos);
			cout << *it;
			cursorPos.Y += 1;
		}
		currentStack.clear();
		copy.~ListBasedStack();

		cursorPos.Y = playAreaOffset.Y + 1;
		cursorPos.X += 4;
	}

	// and finally, output the command prompt
	cursorPos = commandOffset;
	SetConsoleCursorPosition(wHnd, cursorPos);
	cout << "Command:";

	cursorPos.X += 9;
	SetConsoleCursorPosition(wHnd, cursorPos);
}

string FreeCellGame::GetInput()
{
	string input;
	getline(cin, input);

	std::cin.ignore(INT_MAX);
	std::cin.clear();

	return input;
}

void FreeCellGame::ResolveMove(string move)
{
	cout << "Attempting to resolve move: " << move << "..." << endl;

	system("pause");
}

