#pragma once

template <class T>
class Array{
	private:
		T* m_array;
		int m_length;
		int m_start_index;

	public:
		Array();
		Array(int length, int start_index);
		Array(Array const& copy);
		~Array();

		Array& operator=(Array const& rhs);
		T& operator[](int index);

		int getStartIndex();
		void setStartIndex(int start_index);

		int getLength();
		void setLength(int length);
};

template <class T>
Array::Array(){}

template <class T>
Array::Array(int length, int start_index){}

template <class T>
Array::Array(Array const& copy){}

template <class T>
Array::~Array(){}

template <class T>
Array& Array::operator=(Array const& rhs){}

template <class T>
T& Array::operator[](int index){}

template <class T>
int Array::getStartIndex(){}

template <class T>
void Array::setStartIndex(int start_index){}

template <class T>
int Array::getLength(){}

template <class T>
void Array::setLength(int length){}